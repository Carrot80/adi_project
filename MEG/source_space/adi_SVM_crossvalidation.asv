function adi_virt_sens_SVM_allRuns (path2data, SubjOutPath, freqbandname, condition1, condition2, latency)

data_condition1 = load ([path2data 'vs_' condition1 '_allRuns_' freqbandname '.mat']);
data_condition2 = load ([path2data 'vs_' condition2 '_allRuns_' freqbandname '.mat']);
NameCond1vs2 = ['vs_' condition1 '_vs_' condition2 '_allRuns'];
cond1 = ['vs_' condition1 '_allRuns'];
cond2 = ['vs_' condition2 '_allRuns'];
data_condition1.(cond1).fsample = 1017.25;
data_condition2.(cond2).fsample = 1017.25;

for k = 1:length(data_condition1.(cond1).trial{1,2}(:,1))
    data_condition1.(cond1).label{k} = k;
    data_condition2.(cond2).label {k}=k;
end;

[sampleinfo] = mk_sampleinfo(data_condition1.(cond1))
data_condition1.(cond1).sampleinfo = sampleinfo;
clear sampleinfo
[sampleinfo] = mk_sampleinfo(data_condition2.(cond2))
data_condition2.(cond2).sampleinfo = sampleinfo;
clear sampleinfo

adi_crossvalidation (data_condition1.(cond1), data_condition2.(cond2), freqbandname, NameCond1vs2, latency, SubjOutPath)

clear data_condition1 data_condition2

data_condition1 = load ([path2data 'vs_ns_' condition1 '_allRuns_' freqbandname '.mat']);
data_condition2 = load ([path2data 'vs_ns_' condition2 '_allRuns_' freqbandname '.mat']);
NameCond1vs2 = ['vs_ns_' condition1 '_vs_' condition2 '_allRuns'];
cond1 = ['vs_ns_' condition1 '_allRuns'];
cond2 = ['vs_ns_' condition2 '_allRuns'];
data_condition1.(cond1).fsample = 1017.25;
data_condition2.(cond2).fsample = 1017.25;
data_condition1.(cond1).sampleinfo = sampleinfo;
clear sampleinfo
[sampleinfo] = mk_sampleinfo(data_condition2.(cond2))
data_condition2.(cond2).sampleinfo = sampleinfo;
clear sampleinfo

adi_crossvalidation (data_condition1.(cond1), data_condition2.(cond2), freqbandname, NameCond1vs2, latency, SubjOutPath)


end

function adi_crossvalidation (data_condition1, data_condition2, freqbandname, NameCond1vs2, latency, SubjOutPath)

    cfg             = [];
    cfg.parameter   = 'trial';
    cfg.keeptrials  = 'yes'; % classifiers operate on individual trials
    cfg.vartrllength = 2;
    
    try
        tCondition1     = ft_timelockanalysis(cfg, data_condition1);
    catch
        tCondition1 = kh_timelockanalysis(data_condition1)
    end
    
    try
        tCondition2     = ft_timelockanalysis(cfg, data_condition2); 
    catch     
        tCondition2     = ft_timelockanalysis(cfg, data_condition2); 
    end
    
    
    
    
    cfg         = [];
    cfg.method  = 'crossvalidate'; % layout braucht es nicht, verschiedene layouts führen zum gleichen ergebnis
    cfg.statistic = {'accuracy', 'binomial', 'contingency'};
    cfg.design  = [ones(size(condition1run.trial,2),1); 2*ones(size(condition2run.trial,2),1)]';
    cfg.resample = 'true';
    %     cfg.mva = {dml.standardizer dml.enet 'family', 'binomial', 'alpha', 0.3};

    Condition1vs2 = [];
    Condition1vs2.Accuracy=[];
    Condition1vs2.Binominal=[];
    Condition1vs2.Latency=latency;
    Condition1vs2.stats='5f-crossvalidation';

    for i = 1:length(latency)  
        cfg.latency = [latency(1,i) latency(2,i)]; 
        stat = ft_timelockstatistics(cfg, tCondition1, tCondition2);
        Condition1vs2.Accuracy(1,i) = stat.statistic.accuracy;
        Condition1vs2.Binominal(1,i) = stat.statistic.binomial;
        Condition1vs2.Contingency{1,i} = stat.statistic.contingency;
    end

    Condition1vs2.latency = latency;
    Condition1vs2.design = cfg.design;

    save ([outPath filesep NameCond1vs2 '_' run '_' freqbandname '.mat'], 'Condition1vs2'); 


end


function [] = adi_figureTPRcrossval_SVM (Condition1vs2, time, cond1, cond2, NameCond1vs2, outPath, freqbandname, run)
 
figure
plot(time, Condition1vs2.Accuracy);
hold on

indSig = []; 
indSig(1:length(Condition1vs2.Binominal)) = NaN;
sig = find(Condition1vs2.Binominal <= 0.1);
indSig(sig) = Condition1vs2.Binominal(sig);
plot(time, indSig,'r+'); 

title([NameCond1vs2, '_', freqbandname]);
xlabel('time');
ylabel('accuracy/p-value'); 
ylim([0 1]);

savefig([outPath, '\run' run '\SVM_result\virtSens\' NameCond1vs2, run, '_', freqbandname,'.fig'])
fig = ([outPath, '\run' run '\SVM_result\virtSens\' NameCond1vs2, run, '_', freqbandname]);
print('-dpng', fig); 

total_cond1 = Condition1vs2.Contingency{1,1}(1,1) + Condition1vs2.Contingency{1,1}(1,2);
total_cond2 = Condition1vs2.Contingency{1,1}(2,1) + Condition1vs2.Contingency{1,1}(2,2);

for i = 1:length(Condition1vs2.Contingency)
    tpr_cond1(i)= Condition1vs2.Contingency{1,i}(1,1)/total_cond1; % true positive rate
    tpr_cond2(i)= Condition1vs2.Contingency{1,i}(2,2)/total_cond2; % true positive rate
end

figure
plot(time, Condition1vs2.Accuracy, 'r');
hold on
plot(time, indSig,'r+');  
hold on
plot(time, tpr_cond1,'b'); 
hold on
plot(time, tpr_cond2,'k'); 
leg_cond1 = (['TPR_', cond1]);
leg_cond2 = (['TPR_', cond2]);
legend ({'total TPR', 'p-value of total TPR', leg_cond1, leg_cond2});
title([NameCond1vs2, '_', freqbandname]);
xlabel('time');
ylabel('accuracy/p-value'); 
ylim ([0 1]);
savefig([outPath '\run' run '\SVM_result\virtSens\' NameCond1vs2 '_' run '_' freqbandname '_TPR.fig']);
fig = ([outPath '\run' run '\SVM_result\virtSens\' NameCond1vs2 '_' run '_' freqbandname '_TPR']);
print('-dpng', fig); 
close all
    
end


function [sampleinfo] = mk_sampleinfo(data)

len = length(data.trial);
sampleinfo = zeros(len,2);
sampleinfo(1, 1) = 1;
sampleinfo(1, 2) = length(data.trial{1,1});
o = 1;
for p = 2:len
    sampleinfo(p,1) = sampleinfo(1,1)+sampleinfo(o,2) % 64 statt 65
    sampleinfo(p,2) = sampleinfo(p,1)+sampleinfo(1,2)-1
    o = o+1;
end

end

function offset = time2offset(time, fsample)

% TIME2OFFSET converts a time-axis of a trial into the offset in samples
% according to the definition from DEFINETRIAL
%
% Use as
%   [offset] = time2offset(time, fsample)
%
% The trialdefinition "trl" is an Nx3 matrix. The first column contains
% the sample-indices of the begin of the trial relative to the begin
% of the raw data , the second column contains the sample_indices of
% the end of the trials, and the third column contains the offset of
% the trigger with respect to the trial. An offset of 0 means that
% the first sample of the trial corresponds to the trigger. A positive
% offset indicates that the first sample is later than the triger, a
% negative offset indicates a trial beginning before the trigger.

% Copyright (C) 2005, Robert Oostenveld
%
% This file is part of FieldTrip, see http://www.fieldtriptoolbox.org
% for the documentation and details.
%
%    FieldTrip is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    FieldTrip is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with FieldTrip. If not, see <http://www.gnu.org/licenses/>.
%
% $Id$

offset = round(time(1)*fsample);

end

function tdata = kh_timelockanalysis(data)

    ntrial      = length(data.trial);
    begsamplatency = zeros(1,ntrial);
    endsamplatency = zeros(1,ntrial);
    offset         = zeros(1,ntrial);
    for k = 1:ntrial
        begsamplatency(k) = min(data.time{k});
        endsamplatency(k) = max(data.time{k});
        offset(k)         = time2offset(data.time{k}, data.fsample); 
    end
    
    minperlength = [max(begsamplatency) min(endsamplatency)];
    maxperlength = [min(begsamplatency) max(endsamplatency)];
    maxtrllength = round((max(endsamplatency)-min(begsamplatency))*data.fsample) + 1;   
    abstimvec    = ((1:maxtrllength) + min(offset) -1)./data.fsample;
    
    timeLength      = [];
    timeLength(1)   = maxperlength(1);
    timeLength(2)   = maxperlength(2);

    numsamples  = zeros(ntrial,1);      % number of selected samples in each trial, is determined later
    nchan       = length(data.label);   % number of channels

%     numsamples = length(data.trial{1,1}(1,:))
    
    begsampl = nearest(abstimvec, timeLength(1));
    endsampl = nearest(abstimvec, timeLength(2));
    maxwin   = endsampl-begsampl+1;
    s        = zeros(nchan, maxwin);    % this will contain the sum
%     ss       = zeros(nchan, maxwin);    % this will contain the squared sum
    dof      = zeros(1, maxwin);
    singtrial = nan(ntrial, nchan, maxwin);

    for k = 1:ntrial
        begsampl = nearest(data.time{k}, timeLength(1));
        endsampl = nearest(data.time{k}, timeLength(2));
        numsamples(k) = endsampl-begsampl+1;
        windowsel = (1:numsamples(k));
        dat = data.trial{k}(:, 1:numsamples);  
        s (:,windowsel) = s (:,windowsel) + dat;  
        singtrial(k,:,:) = dat;
        dof(windowsel) = dof(windowsel) + 1;
    end
    
    avg = s ./ repmat(dof(:)', [nchan 1]);
    
    tdata.avg = avg;
    tdata.trial = singtrial;
    tdata.label=data.label;
    tdata.dof =dof;
    t

end